/// FUNÇÕES FORNECIDAS

// limpa variável
operation clear(A){
 1: if zero A then goto 0 else goto 2
 2: do dec A goto 1
}

// A:=A+B (soma destrutiva)
operation soma(A,B){
  1: if zero B then goto 0 else goto 2
  2: do dec B goto 3
  3: do inc A goto 1
}

// A:=A+B (soma não-destrutiva)
operation soma(A,B,C){
  1: if zero B then goto 5 else goto 2
  2: do dec B goto 3
  3: do inc A goto 4
  4: do inc C goto 1
  5: if zero C then goto 0 else goto 6
  6: do dec C goto 7
  7: do inc B goto 5
}

// A:=B (atribuição destrutiva)
operation load(A,B){
  1: do clear(A) goto 2
  2: do soma(A,B) goto 0
}

// A:=B usando C (atribuição não-destrutiva)
operation load(A,B,C){
  1: do clear(A) goto 2
  2: do soma(A,B,C) goto 0
}

// A:=A div 2 usando C (divisão inteira por 2)
operation div2(A,C){
  1: do load(C,A) goto 2
  2: if zero C then goto 0 else goto 3
  3: do dec C goto 4
  4: if zero C then goto 0 else goto 5
  5: do dec C goto 6
  6: do inc A goto 2
}

// A divisivel_por_2 usando C (teste se multiplo de 2)
test divBy2(A,C){
  1: do load(C,A) goto 2
  2: if zero C then goto true else goto 3
  3: do dec C goto 4
  4: do inc A goto 5
  5: if zero C then goto false else goto 6
  6: do inc A goto 7
  7: do dec C goto 2
}

// A:=fst(B) usando C,D (extrai o primeiro componente do par)
operation fst(A,B,C,D){
  1: do clear(A) goto 2
  2: do load(C,B,D) goto 3
  3: if divBy2(C,D) then goto 4 else goto 6
  4: do div2(C,D) goto 5
  5: do inc A goto 3
  6: do clear(C) goto 0
}

// A:=A div 3 usando C (divisão inteira por 3)
operation div3(A,C){
  1: do load(C,A) goto 2
  2: if zero C then goto 0 else goto 3
  3: do dec C goto 4
  4: if zero C then goto 0 else goto 5
  5: do dec C goto 6
  6: if zero C then goto 0 else goto 7
  7: do dec C goto 8
  8: do inc A goto 2
}

// A divisivel_por_3 usando C (teste se múltiplo de 3)
test divBy3(A,C){
  1: do load(C,A) goto 2
  2: if zero C then goto true else goto 3
  3: do dec C goto 4
  4: do inc A goto 5
  5: if zero C then goto false else goto 6
  6: do inc A goto 7
  7: do dec C goto 8
  8: if zero C then goto false else goto 9
  9: do dec C goto 10
 10: do inc A goto 2
}

// A:=snd(B) usando C,D (extrai o segundo componente do par)
operation snd(A,B,C,D){
  1: do clear(A) goto 2
  2: do load(C,B,D) goto 3
  3: if divBy3(C,D) then goto 4 else goto 6
  4: do div3(C,D) goto 5
  5: do inc A goto 3
  6: do clear(C) goto 0
}

/// FUNÇÕES CRIADAS

// Testa se A maior que B usando C, D e E
test maior(A,B,C,D,E){
// C:=A e D:=B
1: do load(C,A,E) goto 2
2: do load(D,B,E) goto 3
// verifico se C zerou, então A não é maior que B.
3: if zero C then goto 4 else goto 5
4: do clear(D) goto false
// se C não zerou, mas D sim, então A é maior que B.
5: if zero D then goto 6 else goto 7
6: do clear(C) goto true
// Decremento C e D.
7: do dec C goto 8
8: do dec D goto 3
}

// A:=A-B usando C (subtração não-destrutiva)
operation subt(A,B,C){
// Enquanto B não for zero, decrementar A (e fazer backup de B em C).
  1: if zero B then goto 5 else goto 2
  2: do dec B goto 3
  3: do dec A goto 4
  4: do inc C goto 1
// Enquanto o backup de B não for zero, incrementar B.
  5: if zero C then goto 0 else goto 6
  6: do dec C goto 7
  7: do inc B goto 5
}

// A:=A%B usando C e D (operação módulo não-destrutiva)
operation mod(A,B,C,D){
// Transforma C em um backup de A.
1: do load(C,A,D) goto 2
// Subtraí B de C, até C zerar. Salvando sempre o penúltimo resultado em A.
2: do load(A,C,D) goto 3
3: do subt(C,B,D) goto 4
4: if zero C then goto 5 else goto 2
// Verifica se o penúltimo resultado é menor que B, se for, então é o resto, se não for, então é igual, e o resto é zero.
5: do load(C,B,D) goto 6
6: do subt(C,A,D) goto 7
7: if zero C then goto 8 else goto 0
8: do clear(A) goto 0
}

main{
// Descubro os valores de entrada.
1: do fst(X1, X, Lixo1, Lixo2) goto 2
2: do snd(X2, X, Lixo1, Lixo2) goto 3
// Verifico se algum dos valores de entrada é zero.
3: if zero X1 then goto 4 else goto 5
4: if zero X2 then goto 6 else goto 7
5: if zero X2 then goto 8 else goto 9
// Se ambos forem, então a saída é zero.
6: do clear(Y) goto 0
// Se um deles for, mas o outro não, então o valor não-nulo é saída.
7: do load(Y, X2) goto 0
8: do load(Y, X1) goto 0
// Se nenhum for, então descobre-se o maior, e executa-se o algoritmo de euclides.
9: if maior(X1, X2, Lixo1, Lixo2, Lixo3) then goto 10 else goto 12
10: do mod(X1, X2, Lixo1, Lixo2) goto 11
11: if zero X1 then goto 7 else goto 12
12: do mod(X2, X1, Lixo1, Lixo2) goto 13
13: if zero X2 then goto 8 else goto 10
}
